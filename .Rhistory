#colData$group=as.factor(str_c(treatment,timee))
#colData$group=relevel(colData$group, ref = "WT0")
colnames(colData)=c("samplename","treatment","timee")
dds=DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~timee+treatment+treatment:timee)
ddslrt=DESeq(dds, test="LRT", reduced=~timee+treatment)
dds=DESeq(dds)
dds =dds[rowSums(counts(dds))>5,]
sizeFactors(dds)
rld=vst(dds)
#pca=plotPCA(rld, intgroup=c("group"))
resultsNames(dds)
res_table=results(dds,contrast=list(c("timee_24_vs_0","timee_4_vs_0"       ,"timee_8_vs_0","treatment_KO_vs_WT","timee24.treatmentKO","timee4.treatmentKO"  ,"timee8.treatmentKO" )))
normalized_counts=counts(dds, normalized=TRUE)
res_table_tb <- res_table %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
sig <- res_table_tb[which(res_table_tb[,7]<0.05 & abs(res_table_tb[,3])>0),]
write.csv(res_table_tb,"all_DGE_and_stats.csv")
write.csv(res_table_tb$gene, "all_DGE_list.csv")
normalized_counts_c=counts(dds, normalized=TRUE)
normalized_counts_c <- normalized_counts_c %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
norm_sig <- normalized_counts_c[,] %>%
dplyr::filter(normalized_counts_c$gene %in% sig$gene) %>%
data.frame() %>%
column_to_rownames(var = "gene")
###pdf("PCA.pdf")
###print(pca)
# dev.off()
#
#
# pdf("dispest.pdf")
# print(plotDispEsts(dds))
# dev.off()
order=c("WT0_1","WT0_2","WT0_3","KO0_1","KO0_2","KO0_3","WT4_1","WT4_2","WT4_3","KO4_1","KO4_2","KO4_3","WT8_1","WT8_2","WT8_3","KO8_1","KO8_2","KO8_3","WT24_1","WT24_2","WT24_3","KO24_1","KO24_2")
#Remove unannotated genes ending in RIK
sig_red=sig[grep("*Rik", sig$gene, invert=TRUE),]
#Remove unnanotated genes starting with Gm
sig_red=sig_red[grep("Gm*", sig$gene, invert=TRUE),]
write.csv(sig_red$gene,"sig_red.csv")
sig_red=arrange(sig_red, desc(log2FoldChange))
sig_red=na.omit(sig_red)
top=head(sig_red,50)
bottom=tail(sig_red,50)
hundred_genes=full_join(top, bottom)
hun_norm_sig_red <- normalized_counts_c[,] %>%
dplyr::filter(normalized_counts_c$gene %in% hundred_genes$gene) %>%
data.frame() %>%
column_to_rownames(var = "gene")
norm_sig_red <- normalized_counts_c[,] %>%
dplyr::filter(normalized_counts_c$gene %in% sig_red$gene) %>%
data.frame() %>%
column_to_rownames(var = "gene")
#Option 1
#Heatmap with all genes, useful to see all genes
phea=pheatmap(norm_sig_red, scale = "row", clustering_distance_rows = "correlation", fontsize = 3, color = viridis(255), cellwidth = 12.0, main = "All times", cluster_cols = TRUE)
pdf("heatmap.pdf", height = 27)
print(phea)
dev.off()
a=sort(cutree(phea$tree_row, k=2))
write.csv(names(a[a==1]),"WT_only.csv")
write.csv(names(a[a==2]),"KO_only.csv")
#Option 2
#random sample of 300 genes, this preserves the natural clustering and avoids biases
phea_ran=pheatmap(slice_sample(norm_sig,n = 300), scale = "row", clustering_distance_rows = "correlation", fontsize = 3, color = colorRampPalette(brewer.pal(9, "YlOrBr"))(255), cellwidth = 12.0, main = "All times", cluster_cols = TRUE)
pdf("random_heatmap.pdf", height = 27)
print(phea_ran)
dev.off()
#Option 2
hun_norm_sig_red_or=hun_norm_sig_red[,order]
hun_phea=pheatmap(hun_norm_sig_red_or, scale = "row", clustering_distance_rows = "correlation", fontsize = 3, color = colorRampPalette(brewer.pal(9, "YlOrBr"))(255), cellwidth = 12.0, main = "All times", cluster_cols = TRUE)
pdf("top_bottom_50_heatmap.pdf")
print(hun_phea)
dev.off()
pheatmap(norm_sig_red, scale = "row", clustering_distance_rows = "correlation", fontsize = 3, color = viridis(255), cellwidth = 12.0, main = "All times", cluster_cols = TRUE)
pheatmap(slice_sample(norm_sig,n = 300), scale = "row", clustering_distance_rows = "correlation", fontsize = 3, color = viridis(255), cellwidth = 12.0, main = "All times", cluster_cols = TRUE)
=pheatmap(hun_norm_sig_red_or, scale = "row", clustering_distance_rows = "correlation", fontsize = 3, color = viridis(255), cellwidth = 12.0, main = "All times", cluster_cols = TRUE)
pheatmap(hun_norm_sig_red_or, scale = "row", clustering_distance_rows = "correlation", fontsize = 3, color = viridis(255), cellwidth = 12.0, main = "All times", cluster_cols = TRUE)
order=c("WT0_1","WT0_2","WT0_3","KO0_1","KO0_2","KO0_3","WT4_1","WT4_2","WT4_3","KO4_1","KO4_2","KO4_3","WT8_1","WT8_2","WT8_3","KO8_1","KO8_2","KO8_3","WT24_1","WT24_2","WT24_3","KO24_1","KO24_2")
norm_sig=norm_sig[order,]
norm_sig
norm_sig <- normalized_counts_c[,] %>%
dplyr::filter(normalized_counts_c$gene %in% sig$gene) %>%
data.frame() %>%
column_to_rownames(var = "gene")
norm_sig
norm_sig=norm_sig[,order]
norm_sig
sig=sig[,order]
normalized_counts_c=normalized_counts_c[,order]
#Remove unannotated genes ending in RIK
sig_red=sig[grep("*Rik", sig$gene, invert=TRUE),]
#Remove unnanotated genes starting with Gm
sig_red=sig_red[grep("Gm*", sig$gene, invert=TRUE),]
write.csv(sig_red$gene,"sig_red.csv")
sig_red=arrange(sig_red, desc(log2FoldChange))
sig_red=na.omit(sig_red)
top=head(sig_red,50)
bottom=tail(sig_red,50)
hundred_genes=full_join(top, bottom)
hun_norm_sig_red <- normalized_counts_c[,] %>%
dplyr::filter(normalized_counts_c$gene %in% hundred_genes$gene) %>%
data.frame() %>%
column_to_rownames(var = "gene")
normalized_counts_c
normalized_counts_c=normalized_counts_c[,order]
normalized_counts_c
model.matrix(~timee+treatment+treatment:timee)
install.packages("path_to_FunPat/FunPat_0.99.0.tar.gz",repos=NULL, type="source")
install.packages("~/Downloads/FunPat_0.99.0.tar.gz",repos=NULL, type="source")
install.packages("~/Downloads/FunPat_0.99.0.tar.gz",repos=NULL, type="source")
BiocManager::install("tseries")
install.packages("~/Downloads/FunPat_0.99.0.tar.gz",repos=NULL, type="source")
FunPat::find.all.patterns(norm_sig)
FunPat::find.all.patterns(norm_sig,seeds = sig$gene)
data(Aimdata)
data(Simdata)
library(FunPat)
data(Simdata)
Simdata
replic<-Simdata$replicates
nC<-Simdata$ctrl
nC
replic
Simdata$ctrl
Simdata$treat
Simdata$replicates
Simdata$replicates[1]
Simdata$replicates[1,]
Simdata$ctrl[1,]
Simdata$treat[1,]
nD<-Simdata$treat
nD
rank.res<-SEL.TS.AREA(replicates=replic,data1=nC,data2=nD)
rank.res<-SEL.TS.AREA(replicates=replic,data1=nC,data2=nD)
res_table0=results(dds,contrast=list(c("timee24.treatmentKO")))
res_table0
res_table0_tb <- res_table0 %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
sig0 <- res_table0_tb[which(res_table0_tb[,7]<0.05 & abs(res_table0_tb[,3])>0),]
sig0
treatment=c("WT","WT","WT","KO","KO","KO","WT","WT","WT","KO","KO","KO","WT","WT","WT",,"KO","KO","KO","WT","WT","WT","KO","KO")
setwd("~/Documents/Synced")
read_excel("ECs.xlsx")
setwd("~/Documents/Synced/SelenoW/SelenoW")
read_excel("ECs.xlsx")
EC=read_excel("ECs.xlsx")
head(keys(grcm38))
head(keys(org.Mm.db,keytype = "ENZYME")
)
head(keys(org.Mm.eg.db,keytype = "ENZYME")
)
head(keys(org.Mm.eg.db,keytype = "ENZYME"))
select(org.Mm.eg.db, keys=EC, cols="SYMBOL", keytype="ENZYME")
select(org.Mm.eg.db, keys=EC, cols="SYMBOL", keytype="ENZYME")
EC
select(org.Mm.eg.db, keys=as.character(EC), cols="SYMBOL", keytype="ENZYME")
as.character(EC)
select(org.Mm.eg.db, keys=as.vector(EC), cols="SYMBOL", keytype="ENZYME")
h=select(org.Mm.eg.db, keys=EC, cols="SYMBOL", keytype="ENZYME")
h=head(keys(org.Mm.eg.db,keytype = "ENZYME"))
h
class(h)
select(org.Mm.eg.db, keys=as.vectorh, cols="SYMBOL", keytype="ENZYME")
select(org.Mm.eg.db, keys=h, cols="SYMBOL", keytype="ENZYME")
select(org.Hs.eg.db, keys=h, cols="SYMBOL", keytype="ENZYME")
library(org.Hs.eg.db)
select(org.Hs.eg.db, keys=h, cols="SYMBOL", keytype="ENZYME")
keys(org.Mm.eg.db,keytype = "ENZYME")
library(readxl)
ECs <- read_excel("ECs.xlsx")
View(ECs)
keys(org.Mm.eg.db,keytype = "ENZYME")
EC
EC=read_excel("ECs.xlsx")
EC
keys(org.Mm.eg.db,keytype = "ENZYME")
xx <- as.list(org.Hs.egENSEMBLTRANS2EG)
xx
x <- org.Mm.egENZYME
# Get the entrez gene id
x
mappedkeys(x)
mapped_genes <- mappedkeys(x)
xx <- as.list(x[mapped_genes])
xx <- as.list(org.Hs.egENZYME2EG)# Gets the entrez gene identifiers for the first five enzyme
#commission numbers
xx[1:5]
# Get the first one
xx[[1]]
}
xx <- as.list(org.Mm.egALIAS2EG)
xx
x <- org.Mm.egENZYME
x
mapped_genes <- mappedkeys(x)
xx <- as.list(x[mapped_genes])
xx
names(xx)
enz=names(xx)
ids<-bitr(enz, fromType = "ENTREZID", toType = "SYMBOL", OrgDb=org.Mm.eg.db)
ids
x <- org.Mm.egENZYME
x
mapped_genes <- mappedkeys(x)
mapped_genes
x
xx <- as.list(org.Hs.egENZYME2EG)
xx
names(xx)
nm=names(xx)
nm
common=nm %in% ECs
common
ECs
intersect(ECs,names(xx))
intersect(ECs,names(xx))
names(xx)
xx <- as.list(org.Hs.egENZYME2EG)
intersect(ECs,names(xx))
xx <- as.list(org.Mm.egENZYME2EG)
intersect(ECs,names(xx))
ECs
ECs=as.vector(ECs)
intersect(ECs,names(xx))
names(xx)
Ecs
ECs
intersect(ECs,names(xx))
ECs
intersect(ECs,names(xx))
names(xx)
ECs
names(xx)
xx <- as.list(org.Hs.egENZYME2EG)
intersect(ECs,names(xx))
ECs
xx <- as.list(org.Hs.egENZYME)
xx
xx <- na.omit(as.list(org.Hs.egENZYME))
xx
xx <- na.remove(as.list(org.Hs.egENZYME))
xx
xx <- complete.cases(org.Hs.egENZYME)
xx <- drop_na(org.Hs.egENZYME)
xx <- as.list(org.Hs.egENZYME)
xx
xx=drop.na(xx)
xx=drop_na(xx)
xx=na.omit(xx)
xx
xx[!is.na(xx)]
xx=xx[!is.na(xx)]
xx
intersect(xx,ECs)
intersect(xx,ECs)
xx
xx=as.vector(xx)
xx
names(xx)=NULL
xx
library(AnnotationDbi)
x <- org.Hs.egENZYME
mapped_genes <- mappedkeys(x)
xx <- as.list(org.Hs.egENZYME2EG)
xx
if(length(xx) > 0){
# Gets the entrez gene identifiers for the first five enzyme
#commission numbers
xx[1:5]
# Get the first one
xx[[1]]
}
library(org.Hs.eg.db)
h <- head(keys(org.Hs.eg.db, keytype="ENZYME"))
h
elect(org.Hs.eg.db, keys=h, cols="SYMBOL", keytype="ENZYME")
select(org.Hs.eg.db, keys=h, cols="SYMBOL", keytype="ENZYME")
library(dplyr)
select(org.Hs.eg.db, keys=h, cols="SYMBOL", keytype="ENZYME")
select(org.Hs.eg.db, keys=h, cols="SYMBOL", keytype="ENZYME")
library(org.Hs.eg.db)
libary(Tidyverse)
libary(tidyverse)
library(tidyverse
)
org.Hs.eg.db::select()
detach("package:tidyverse", unload = TRUE)
detach("package:dplyr", unload = TRUE)
detach("package:dbplyr", unload = TRUE)
select(org.Hs.eg.db, keys=h, cols="SYMBOL", keytype="ENZYME")
h <- head(keys(org.Hs.eg.db, keytype="ENZYME"))
h
keys(org.Hs.eg.db, keytype="ENZYME")
a=keys(org.Hs.eg.db, keytype="ENZYME")
intersect(a,ECs)
intersect(a,ECs)
ECs
a=keys(org.Mm.eg.db, keytype="ENZYME")
intersect(a,ECs)
ECs
xx <- as.list(org.EcK12.egENZYME2EG)
xx <- as.list(org.Hs.egALIAS2EG)
xx
xx
xx <- as.list(org.Hs.egENZYME)
xx
xx=unlist(xx)
xx
names(xx)=NULL
xx
xx=na.omit(xx)
xx
xx <- as.list(org.Hs.egENZYME)
xx=unlist(xx)\
xx=unlist(xx)
xx=drop_na(xx)
xx=na.remove(xx)
xx
xx
xx=as.vector(xx)
xx
intersect(xx,ECs)
intersect(xx,ECs$1.1.1.1)
intersect(xx,ECs)
ECs
install.packages("remotes")
remotes::install_github("BUStools/BUSpaRse")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biodbExpasy")
# Create an instance with default settings:
mybiodb <- biodb::newInst()
# Get a connector:
conn <- mybiodb$getFactory()$createConn('expasy.enzyme')
# Get the first entry
e <- conn$getEntry('1.1.1.1')
# Terminate instance.
mybiodb$terminate()
# Create an instance with default settings:
mybiodb <- biodb::newInst()
# Get a connector:
conn <- mybiodb$getFactory()$createConn('expasy.enzyme')
# Get the first entry
e <- conn$getEntry(ECs)
# Create an instance with default settings:
mybiodb <- biodb::newInst()
# Get a connector:
conn <- mybiodb$getFactory()$createConn('expasy.enzyme')
# Get the first entry
e <- conn$getEntry('1.1.1.1')
# Terminate instance.
mybiodb$terminate()
e
library(KEGGREST)
hsa.ec <- keggLink("enzyme", "hsa")
headhsa.ec)
library(KEGGREST)
hsa.ec <- keggLink("enzyme", "hsa")
headhsa.ec
hsa.ec <- keggLink("enzyme", "hsa")
hsa.ec
xx <- as.list(org.Hs.egENZYME2EG)
xx
length(xx)
ECs
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("brendaDb")
df <- ReadBrenda(system.file("extdata", "brenda_download_test.txt",
package = "brendaDb"))
library(brendaDb)
df <- ReadBrenda(system.file("extdata", "brenda_download_test.txt",
package = "brendaDb"))
res <- QueryBrenda(brenda = df, EC = c("1.1.1.1", "6.3.5.8"),
n.core = 2)
res
res <- QueryBrenda(brenda = df, EC = ECs,
n.core = 2)
res <- QueryBrenda(brenda = df, EC = ECs,
n.core = 2)
res
res
ECs
res <- QueryBrenda(brenda = df, EC = ECs,
n.core = 2)
res <- QueryBrenda(brenda = df, EC = ECs[1],
n.core = 2)
res <- QueryBrenda(brenda = df, EC = ECs[1],
n.core = 2)
ECs[1]
ECs[1,]
ECs[,1]
ECs[1]
ECs[[11]
ECs[[1]
ECs[[1]]
class(ECs)
ECs=unlist(ECs)
class(ECs)
res <- QueryBrenda(brenda = df, EC = ECs[1],
n.core = 2)
res
res <- QueryBrenda(brenda = df, EC = ECs[2],
n.core = 2)
res <- QueryBrenda(brenda = df, EC = "1.1.1.105",
n.core = 2)
res <- QueryBrenda(brenda = df, EC = "1.1.1.1",
n.core = 2)
res
res
ECs
res <- QueryBrenda(brenda = df, EC = "5.1.1.18",
n.core = 2)
res <- QueryBrenda(brenda = df, EC = "1.1.1.1508",
n.core = 2)
res <- QueryBrenda(brenda = df, EC = 1.1.1.1508,
res <- QueryBrenda(brenda = df, EC = "1.1.1.1508",
n.core = 2)
df <- ReadBrenda(system.file("extdata", "brenda_download_test.txt",
package = "brendaDb"))
res <- QueryBrenda(brenda = df, EC = ECs[2],
n.core = 2)
res <- QueryBrenda(brenda = df, EC = ECs[1],
n.core = 2)
res <- QueryBrenda(brenda = df, EC = "1.1.1.10",
n.core = 2)
res <- QueryBrenda(brenda = df, EC = "1.1.1.1",
n.core = 2)
res <- QueryBrenda(brenda = df, EC = "2.3.3.16",
n.core = 2)
res <- QueryBrenda(brenda = df, EC = c("1.1.1.1", "1.1.1.10", "6.3.5.8"),
n.core = 2, organisms = "Homo sapiens")
df <- ReadBrenda(system.file("extdata", "brenda_download_test.txt",
package = "brendaDb"))
df
brenda_txt <- system.file("extdata", "brenda_download.txt",
package = "brendaDb")
brenda_txt
df <- ReadBrenda(brenda_txt)
df
dim(df)
df <- ReadBrenda(system.file("extdata", "brenda_download.txt",
package = "brendaDb"))
df <- ReadBrenda(system.file("extdata", "brenda_2023_1.txt",
package = "brendaDb"))
df <- ReadBrenda(system.file("extdata", "~/Documents/Synced/SelenoW/SelenoW/brenda_2023_1.txt",
package = "brendaDb"))
df <- ReadBrenda(system.file(~/Documents/Synced/SelenoW/SelenoW/brenda_2023_1.txt",
df <- ReadBrenda(system.file("~/Documents/Synced/SelenoW/SelenoW/brenda_2023_1.txt",
package = "brendaDb"))
df <- ReadBrenda(system.file("~/Documents/Synced/SelenoW/SelenoW/" "brenda_2023_1.txt",
df <- ReadBrenda(system.file("~/Documents/Synced/SelenoW/SelenoW/", "brenda_2023_1.txt",
package = "brendaDb"))
df <- ReadBrenda("~/Documents/Synced/SelenoW/SelenoW/", "brenda_2023_1.txt",
package = "brendaDb"))
df <- ReadBrenda("~/Documents/Synced/SelenoW/SelenoW/", "brenda_2023_1.txt",
package = "brendaDb")
df <- ReadBrenda("~/Documents/Synced/SelenoW/SelenoW/brenda_2023_1.txt" package = "brendaDb")
df <- ReadBrenda("~/Documents/Synced/SelenoW/SelenoW/brenda_2023_1.txt", package = "brendaDb")
df <- ReadBrenda("~/Documents/Synced/SelenoW/SelenoW/brenda_2023_1.txt")
df
res <- QueryBrenda(brenda = df, EC = c("1.1.1.1", "1.1.1.10", "6.3.5.8"),
n.core = 2, organisms = "Homo sapiens")
res
res[["1.1.1.1"]]
res <- QueryBrenda(df, EC = "1.1.1.1", fields = c("PROTEIN", "SUBSTRATE_PRODUCT"))
res[["1.1.1.1"]][["interactions"]][["substrate.product"]]
res
res <- QueryBrenda(df, EC = "1.1.1.1", fields = c("PROTEIN", "SUBSTRATE_PRODUCT"))
res[["1.1.1.1"]][["interactions"]][["substrate.product"]]
ID2Enzyme(brenda = df, ids = c(ECs))
xx
dim(xx)
length(xx)
xx <- as.list(org.Hs.egENZYME2EG)
length(xx)
xx <- as.list(org.Mm.egENZYME2EG)
length(xx)
xx
xx=unlist(xx)
xx
xx <- as.list(org.Hs.egENZYME2EG)
xx=unlist(xx)
xx
EC
ECs
library(readxl)
ECs <- read_excel("ECs.xlsx")
View(ECs)
xx <- as.list(org.Mm.egENZYME2EG)
xx
xx=unlist(xx)
xx
names(c)
names(xx)
intersect(names(xx),as.vector(ECs)
)
as.vector(ECs)
xx <- as.list(org.Hs.egENZYME2EG)
xx
intersect(names(xx),as.vector(ECs)
)
?EnzymeIdentifier()
intersect(ECs,names(xx))
intersect(ECs,names(xx))
EnzymeIdentifier(ECs)
