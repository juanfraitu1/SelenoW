else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
Summary_data <- summarySE(data, measurevar="Percent_Orig_Weight", groupvars=c("Genotype","Day"))
colnames(data)
BB <- ggplot(Summary_data, aes(x=as.numeric(Day), y=as.numeric(Percent_Orig_Weight), colour=Genotype)) +
geom_segment(aes(xend = as.numeric(Day), yend = as.numeric(Percent_Orig_Weight) +
ifelse(Genotype == "Villin Cre[+/-] Selenow[+/-]", se, -se)),
arrow = arrow(angle = 90, length = unit(0.2, "cm")), size = 1.0) +
geom_line(aes(colour=Genotype), size=1.0) +
geom_point(size=5, shape=21, fill="white") +  # geom_point(size=3, shape=21, fill="white") +
scale_color_manual(values = c("darkcyan", "orangered2")) +
xlab("Time (Day)") +
ylab("Weight Loss (%)") +
scale_x_continuous(breaks=c(1,3,5,7,9)) +
scale_y_continuous(expand = expansion(mult = c(0.05, 0.25)))  +
theme_bw() +
theme(axis.title.x = element_text(size=18, face="bold"),
axis.title.y = element_text(size=18, face="bold"),
strip.text.x = element_text(size = 14, color = "black", face = "italic"),
strip.text.y = element_text(size = 14, color = "black", face = "italic"), aspect.ratio = 1.00) # To make gene names bold, use face = "bold.italic"
str(data)
sapply(data, class)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
Summary_data <- summarySE(data, measurevar="Percent_Orig_Weight", groupvars=c("Genotype","Day"))
library(dplyr)
library(cowplot) # To arrange graphs ## Cowplot, Check@ https://stackoverflow.com/questions/1249548/side-by-side-plots-with-ggplot2/31223588#31223588
theme_set(theme_bw())
t.data <- Experiment_Summary_January_2023
s.data <- t.data[c(8,9,10,12)]
s.data
data <- s.data %>% drop_na()
data
colnames(data)
names(data)[names(data) == "Genotype...9"] <- "Genotype"
data
colnames(data)
str(data)
sapply(data, class)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
Summary_data <- summarySE(data, measurevar="Percent_Orig_Weight", groupvars=c("Genotype","Day"))
s.data <- t.data[c(8,9,10,11)]
s.data
data <- s.data %>% drop_na()
data
data <- s.data %>% drop_na()
data
colnames(data)
names(data)[names(data) == "Genotype...9"] <- "Genotype"
data
colnames(data)
str(data)
sapply(data, class)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
Summary_data <- summarySE(data, measurevar="Percent_Weight_Loss", groupvars=c("Genotype","Day"))
library(dplyr)
library(cowplot) # To arrange graphs ## Cowplot, Check@ https://stackoverflow.com/questions/1249548/side-by-side-plots-with-ggplot2/31223588#31223588
theme_set(theme_bw())
t.data <- Experiment_Summary_January_2023
s.data <- t.data[c(8,9,10,11)]
s.data
data <- s.data %>% drop_na()
data
colnames(data)
names(data)[names(data) == "Genotype...9"] <- "Genotype"
data
colnames(data)
str(data)
sapply(data, class)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
Summary_data <- summarySE(data, measurevar="Percent_Weight_Loss", groupvars=c("Genotype","Day"))
knitr::opts_chunk$set(echo = TRUE)
"false"<=FALSE
"true"<=TRUE
knitr::opts_current$set(cache = TRUE, warning = FALSE,message = FALSE, cache.lazy = FALSE)
# Package names
packages <- c("ggrepel", "pheatmap", "DOSE", "clusterProfiler", "ensembldb", "annotables", "apeglm", "RColorBrewer", "vsn", "DESeq2", "ggplot2", "reshape2", "gage", "gageData", "AnnotationDbi", "tidyr", "dplyr", "org.Mm.eg.db", "gplots", "GO.db", "GOstats", "AnnotationHub", "pathview", "plyr", "tidyverse", "purrr", "GSEABase", "igraph", "vissE", "patchwork", "msigdb", "tibble", "msigdbr","fgsea", "GEOquery","EnhancedVolcano")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
BiocManager::install(packages[!installed_packages])
}
# Packages loading
invisible(lapply(packages, library, character.only = TRUE))
library(readxl)
library(readxl)
Gene_count_matrix_DEseq2_V4_NOT_normalized <- read_excel("C:/Users/spm6456/OneDrive - The Pennsylvania State University/SelenoW KO BMDM/LPS Study/Experiments_Start at Day4/Experiment 4_3 mice/RNAseq/Results/Sougat Analysis_R/Gene_count_matrix_DEseq2_V4_NOT normalized.xlsx")
View(Gene_count_matrix_DEseq2_V4_NOT_normalized)
countData <- read_excel("Gene_count_matrix_DEseq2_V4_NOT normalized.xlsx")
countData <- read_excel(Gene_count_matrix_DEseq2_V4_NOT normalized.xlsx)
countData <- Gene_count_matrix_DEseq2_V4_NOT normalized.xlsx
countData <- Gene_count_matrix_DEseq2_V4_NOT normalized
data <- Gene_count_matrix_DEseq2_V4_NOT_normalized
countData <- data
colnames(countData)=c("gene_id","WT0_1","WT0_2","WT0_3","WT4_1","WT4_2","WT4_3","WT8_1","WT8_2","WT8_3","WT24_1","WT24_2","WT24_3","KO0_1","KO0_2","KO0_3","KO4_1","KO4_2","KO4_3","KO8_1","KO8_2","KO8_3","KO24_1","KO24_2")
countData=countData[,c(1:4,14:16)]
countData=aggregate(. ~gene_id , data = countData, sum)
#countData <- tibble::column_to_rownames(countData, "simple")
countData=column_to_rownames(countData,'gene_id')
#countData <- tibble::column_to_rownames(countData, "simple")
countData=column_to_rownames(countData,'gene_id')
?column_to_rownames
install.packages(tibble)
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
knitr::opts_chunk$set(echo = TRUE)
"false"<=FALSE
"true"<=TRUE
knitr::opts_current$set(cache = TRUE, warning = FALSE,message = FALSE, cache.lazy = FALSE)
library(readxl)
data <- Gene_count_matrix_DEseq2_V4_NOT_normalized
countData <- data
colnames(countData)=c("gene_id","WT0_1","WT0_2","WT0_3","WT4_1","WT4_2","WT4_3","WT8_1","WT8_2","WT8_3","WT24_1","WT24_2","WT24_3","KO0_1","KO0_2","KO0_3","KO4_1","KO4_2","KO4_3","KO8_1","KO8_2","KO8_3","KO24_1","KO24_2")
countData=countData[,c(1:4,14:16)]
countData=aggregate(. ~gene_id , data = countData, sum)
countData=aggregate(. ~gene_id , data = countData, sum)
#countData <- tibble::column_to_rownames(countData, "simple")
countData=column_to_rownames(countData,'gene_id') # Error: could not find function "column_to_rownames"
#countData <- tibble::column_to_rownames(countData, "simple")
countData=column_to_rownames(countData,'gene_id') # Error: could not find function "column_to_rownames"
library(dbplyr)
detach("package:dbplyr", unload = TRUE)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
"false"<=FALSE
"true"<=TRUE
knitr::opts_current$set(cache = TRUE, warning = FALSE,message = FALSE, cache.lazy = FALSE)
#countData <- tibble::column_to_rownames(countData, "simple")
countData=column_to_rownames(countData,'gene_id') # Error: could not find function "column_to_rownames"
data <- Gene_count_matrix_DEseq2_V4_NOT_normalized
countData <- data
colnames(countData)=c("gene_id","WT0_1","WT0_2","WT0_3","WT4_1","WT4_2","WT4_3","WT8_1","WT8_2","WT8_3","WT24_1","WT24_2","WT24_3","KO0_1","KO0_2","KO0_3","KO4_1","KO4_2","KO4_3","KO8_1","KO8_2","KO8_3","KO24_1","KO24_2")
countData=countData[,c(1:4,14:16)]
countData
library(clusterProfiler)
#countData <- tibble::column_to_rownames(countData, "simple")
countData=column_to_rownames(countData,'gene_id') # Error: could not find function "column_to_rownames"
treatment=c("WT","WT","WT","KO","KO","KO")
colData=as_tibble(cbind(colnames(countData),treatment))
library(readxl)
data <- Gene_count_matrix_DEseq2_V4_NOT_normalized
countData <- data
colnames(countData)=c("gene_id","WT0_1","WT0_2","WT0_3","WT4_1","WT4_2","WT4_3","WT8_1","WT8_2","WT8_3","WT24_1","WT24_2","WT24_3","KO0_1","KO0_2","KO0_3","KO4_1","KO4_2","KO4_3","KO8_1","KO8_2","KO8_3","KO24_1","KO24_2")
countData=countData[,c(1:4,14:16)]
countData=aggregate(. ~gene_id , data = countData, sum)
countData
#countData <- tibble::column_to_rownames(countData, "simple")
countData=column_to_rownames(.countData,'gene_id') # Error: could not find function "column_to_rownames"
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
"false"<=FALSE
"true"<=TRUE
knitr::opts_current$set(cache = TRUE, warning = FALSE,message = FALSE, cache.lazy = FALSE)
countData=column_to_rownames(.countData, var = "gene_id") # Error: could not find function "column_to_rownames"
countData=column_to_rownames(.countData, var = "gene_id") %>% as_tibble() # Error: could not find function "column_to_rownames"
library(tibble)
#countData <- tibble::column_to_rownames(countData, "simple")
countData=column_to_rownames(.countData, var = "gene_id")
#countData <- tibble::column_to_rownames(countData, "simple")
countData=column_to_rownames(countData, var = "gene_id")
library(tibble)
data <- Gene_count_matrix_DEseq2_V4_NOT_normalized
countData <- data
colnames(countData)=c("gene_id","WT0_1","WT0_2","WT0_3","WT4_1","WT4_2","WT4_3","WT8_1","WT8_2","WT8_3","WT24_1","WT24_2","WT24_3","KO0_1","KO0_2","KO0_3","KO4_1","KO4_2","KO4_3","KO8_1","KO8_2","KO8_3","KO24_1","KO24_2")
countData=countData[,c(1:4,14:16)]
countData=aggregate(. ~gene_id , data = countData, sum)
countData=aggregate(. ~gene_id , data = countData, sum)
#countData <- tibble::column_to_rownames(countData, "simple")
countData=column_to_rownames(countData, var = "gene_id")
countdata
countdata
countData=aggregate(. ~gene_id , data = countData, sum)
data <- Gene_count_matrix_DEseq2_V4_NOT_normalized
countData <- data
colnames(countData)=c("gene_id","WT0_1","WT0_2","WT0_3","WT4_1","WT4_2","WT4_3","WT8_1","WT8_2","WT8_3","WT24_1","WT24_2","WT24_3","KO0_1","KO0_2","KO0_3","KO4_1","KO4_2","KO4_3","KO8_1","KO8_2","KO8_3","KO24_1","KO24_2")
countData=countData[,c(1:4,14:16)]
countData=aggregate(. ~gene_id , data = countData, sum)
#countData <- tibble::column_to_rownames(countData, "simple")
countData=column_to_rownames(countData, var = "gene_id")
countdata
View(colData)
View(countData)
treatment=c("WT","WT","WT","KO","KO","KO")
colData=as_tibble(cbind(colnames(countData),treatment))
colnames(colData)[1]="samplename"
dds=DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~treatment)
# Packages loading
invisible(lapply(packages, library, character.only = TRUE))
library(DESeq2)
dds=DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~treatment)
dds=estimateSizeFactors(dds)
sizeFactors(dds)
dds=DESeq(dds)
dds =dds[rowSums(counts(dds))>50,]
sizeFactors(dds)
rld=vst(dds)
plotPCA(rld, intgroup=c("treatment"))
# Packages loading
invisible(lapply(packages, library, character.only = TRUE))
install.packages("clusterProfiler")
install.packages("vctrs")
install.packages("vctrs")
install.packages("easypackages")
packages("ggrepel", "pheatmap", "DOSE", "clusterProfiler", "ensembldb", "annotables", "apeglm", "RColorBrewer", "vsn", "DESeq2", "ggplot2", "reshape2", "gage", "gageData", "AnnotationDbi", "tidyr", "dplyr", "org.Mm.eg.db", "gplots", "GO.db", "GOstats", "AnnotationHub", "pathview", "plyr", "tidyverse", "purrr", "GSEABase", "igraph", "vissE", "patchwork", "msigdb", "tibble", "msigdbr","fgsea", "GEOquery","EnhancedVolcano")
library("packages")
library("easypackages")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
install.packages("htmltools")
library(htmltools)
packages("ggrepel", "pheatmap", "DOSE", "clusterProfiler", "ensembldb", "annotables", "apeglm", "RColorBrewer", "vsn", "DESeq2", "ggplot2", "reshape2", "gage", "gageData", "AnnotationDbi", "tidyr", "dplyr", "org.Mm.eg.db", "gplots", "GO.db", "GOstats", "AnnotationHub", "pathview", "plyr", "tidyverse", "purrr", "GSEABase", "igraph", "vissE", "patchwork", "msigdb", "tibble", "msigdbr","fgsea", "GEOquery","EnhancedVolcano")
library("easypackages")
install.packages('sp', dependencies = TRUE)
install.packages("sp", dependencies = TRUE)
install.packages("sp", dependencies = TRUE)
# installing/loading the package:
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
install.packages("installr")
updateR()
library(installr)
updateR()
update.packages(ask = FALSE)
knitr::opts_chunk$set(echo = TRUE)
"false"<=FALSE
"true"<=TRUE
knitr::opts_current$set(cache = TRUE, warning = FALSE,message = FALSE, cache.lazy = FALSE)
# Package names
packages <- c("ggrepel", "pheatmap", "DOSE", "clusterProfiler", "ensembldb", "annotables", "apeglm", "RColorBrewer", "vsn", "DESeq2", "ggplot2", "reshape2", "gage", "gageData", "AnnotationDbi", "tidyr", "dplyr", "org.Mm.eg.db", "gplots", "GO.db", "GOstats", "AnnotationHub", "pathview", "plyr", "tidyverse", "purrr", "GSEABase", "igraph", "vissE", "patchwork", "msigdb", "tibble", "msigdbr","fgsea", "GEOquery","EnhancedVolcano")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
BiocManager::install(packages[!installed_packages])
}
# Packages loading
lapply(packages, library, character.only = TRUE)
install.packages("ggplot2", dependencies = TRUE)
# Packages loading
lapply(packages, library, character.only = TRUE)
library("ggplot2")
install.packages("rlang", dependencies = TRUE)
install.packages("rlang", dependencies = TRUE)
library("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
"false"<=FALSE
"true"<=TRUE
knitr::opts_current$set(cache = TRUE, warning = FALSE,message = FALSE, cache.lazy = FALSE)
# Package names
packages <- c("ggrepel", "pheatmap", "DOSE", "clusterProfiler", "ensembldb", "annotables", "apeglm", "RColorBrewer", "vsn", "DESeq2", "ggplot2", "reshape2", "gage", "gageData", "AnnotationDbi", "tidyr", "dplyr", "org.Mm.eg.db", "gplots", "GO.db", "GOstats", "AnnotationHub", "pathview", "plyr", "tidyverse", "purrr", "GSEABase", "igraph", "vissE", "patchwork", "msigdb", "tibble", "msigdbr","fgsea", "GEOquery","EnhancedVolcano")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
BiocManager::install(packages[!installed_packages])
}
# Packages loading
lapply(packages, library, character.only = TRUE)
# Package names
packages <- c("ggrepel", "pheatmap", "DOSE", "clusterProfiler", "ensembldb", "annotables", "apeglm", "RColorBrewer", "vsn", "DESeq2", "ggplot2", "reshape2", "gage", "gageData", "AnnotationDbi", "tidyr", "dplyr", "org.Mm.eg.db", "gplots", "GO.db", "GOstats", "AnnotationHub", "pathview", "plyr", "tidyverse", "purrr", "GSEABase", "igraph", "vissE", "patchwork", "msigdb", "tibble", "msigdbr","fgsea", "GEOquery","EnhancedVolcano")
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
BiocManager::install(packages[!installed_packages])
}
# Packages loading
invisible(lapply(packages, library, character.only = TRUE))
library(readxl)
Gene_count_matrix_DEseq2_V4_NOT_normalized <- read_excel("C:/Users/spm6456/OneDrive - The Pennsylvania State University/SelenoW KO BMDM/LPS Study/Experiments_Start at Day4/Experiment 4_3 mice/RNAseq/Results/Sougat Analysis_R/Gene_count_matrix_DEseq2_V4_NOT normalized.xlsx")
View(Gene_count_matrix_DEseq2_V4_NOT_normalized)
data <- Gene_count_matrix_DEseq2_V4_NOT_normalized
countData <- data
colnames(countData)=c("gene_id","WT0_1","WT0_2","WT0_3","WT4_1","WT4_2","WT4_3","WT8_1","WT8_2","WT8_3","WT24_1","WT24_2","WT24_3","KO0_1","KO0_2","KO0_3","KO4_1","KO4_2","KO4_3","KO8_1","KO8_2","KO8_3","KO24_1","KO24_2")
countData=countData[,c(1:4,14:16)]
countData=aggregate(. ~gene_id , data = countData, sum)
countData=aggregate(. ~gene_id , data = countData, sum)
#countData <- tibble::column_to_rownames(countData, "simple")
countData=column_to_rownames(countData, var = "gene_id")
treatment=c("WT","WT","WT","KO","KO","KO")
colData=as_tibble(cbind(colnames(countData),treatment))
colnames(colData)[1]="samplename"
dds=DESeqDataSetFromMatrix(countData = countData, colData = colData, design = ~treatment)
dds=estimateSizeFactors(dds)
sizeFactors(dds)
dds=DESeq(dds)
dds =dds[rowSums(counts(dds))>50,]
sizeFactors(dds)
rld=vst(dds)
plotPCA(rld, intgroup=c("treatment"))
normalized_counts0=rld
res_table0=lfcShrink(dds, coef=2)
res_table0=lfcShrink(dds, coef=2)
padj.cutoff <- 0.05
lfc.cutoff <- 1.5
normalized_counts0=counts(dds, normalized=TRUE)
res_table0_tb <- res_table0 %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
View(res_table0_tb)
sig0 <- res_table0_tb %>%
dplyr::filter(padj < padj.cutoff & abs(log2FoldChange) > lfc.cutoff)
normalized_counts_c0=counts(dds, normalized=TRUE)
normalized_counts_c0 <- normalized_counts_c0 %>%
data.frame() %>%
rownames_to_column(var="gene") %>%
as_tibble()
norm_sig0 <- normalized_counts_c0[,] %>%
dplyr::filter(normalized_counts_c0$gene %in% sig0$gene) %>%
data.frame() %>%
column_to_rownames(var = "gene")
View(norm_sig0)
EnhancedVolcano(res_table0,lab = rownames(res_table0),x = 'log2FoldChange',y = 'pvalue', title = 'WT vs KO time 0', pCutoff = 5e-2, FCcutoff = 1.5, pointSize = 2.0,labSize = 4.0)
EnhancedVolcano(res_table0,lab = rownames(res_table0),x = 'log2FoldChange',y = 'pvalue', title = 'WT vs KO time 0', pCutoff = 5e-2, FCcutoff = 1.5, pointSize = 2.0,labSize = 4.0)
rg <- redgreen(20)
pheatmap(norm_sig0,fontsize = 2,color = rg)
```{r error=TRUE}
idx = grcm38$symbol %in% rownames(res_table0)
ids <- grcm38[idx, ]
non_duplicates <- which(duplicated(ids$symbol) == FALSE)
ids <- ids[non_duplicates, ]
res_ids <- inner_join(res_table0_tb, ids, by=c("gene"="symbol"))
all_genes <- as.character(res_ids$entrez)
sig0 <- dplyr::filter(res_ids, padj < 0.05)
sig0_genes <- as.character(sig0$entrez)
ego <- enrichGO(gene = sig0_genes,
universe = all_genes,
keyType = "ENTREZID",
OrgDb = org.Mm.eg.db,
ont = "BP",
pAdjustMethod = "BH",
qvalueCutoff = 0.005,
readable = TRUE)
View(countData)
CountData %>%
separate(col1, c("Ensemble_ID", "gene"), "|")
countData %>%
separate(col1, c("Ensemble_ID", "gene"), "|")
countData %>%
separate(gene_id, c("Ensemble_ID", "gene"), "|")
data <- Gene_count_matrix_DEseq2_V4_NOT_normalized
countData <- data
colnames(countData)=c("gene_id","WT0_1","WT0_2","WT0_3","WT4_1","WT4_2","WT4_3","WT8_1","WT8_2","WT8_3","WT24_1","WT24_2","WT24_3","KO0_1","KO0_2","KO0_3","KO4_1","KO4_2","KO4_3","KO8_1","KO8_2","KO8_3","KO24_1","KO24_2")
countData
countData %>%
separate(gene_id, c("Ensemble_ID", "gene"), "|")
countData
View(countData)
data <- Gene_count_matrix_DEseq2_V4_NOT_normalized
countData <- data
colnames(countData)=c("gene_id","WT0_1","WT0_2","WT0_3","WT4_1","WT4_2","WT4_3","WT8_1","WT8_2","WT8_3","WT24_1","WT24_2","WT24_3","KO0_1","KO0_2","KO0_3","KO4_1","KO4_2","KO4_3","KO8_1","KO8_2","KO8_3","KO24_1","KO24_2")
countData
countData %>%
separate(gene_id, c("Ensemble_ID", "gene"), "|")
data <- Gene_count_matrix_DEseq2_V4_NOT_normalized
countData <- data
colnames(countData)=c("gene_id","WT0_1","WT0_2","WT0_3","WT4_1","WT4_2","WT4_3","WT8_1","WT8_2","WT8_3","WT24_1","WT24_2","WT24_3","KO0_1","KO0_2","KO0_3","KO4_1","KO4_2","KO4_3","KO8_1","KO8_2","KO8_3","KO24_1","KO24_2")
countData
countData
View(countData)
View(data)
setwd("~/GitHub/SelenoW")
setwd("~/GitHub/SelenoW")
a=c(1,2,3)
write.csv(a,"a.csv")
`chicago-nmmaps` <- readRDS("~/GitHub/ggplot-courses/data/chicago-nmmaps.Rds")
